;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.

(define or
    (lambda (a b)
        (if (eq a #t)
            #t
            (if (eq b #t)
                #t
                #f))))

(define and
    (lambda (a b)
        (if (eq a #t)
            (if (eq b #t)
                #t
                #f)
            #f)))

(define xor
    (lambda (a b)
        (and (or a b) (not (and a b)))))

(define >=
    (lambda (a b)
        (or (> a b) (eq a b))))

(define <
    (lambda (a b)
        (and (not (> a b)) (not(eq a b)))))

(define <=
    (lambda (a b)
        (or (< a b) (eq a b))))

(define length
    (lambda (l)
        (if (empty l)
            0
            (+ 1 (length (tail l))))))

(define sum
    (lambda (l)
        (if (empty l)
            0
            (+ (head l) (sum (tail l))))))

(define range
	(lambda (a b)
		(if (> a b)
			'()
			(cons a (range (+ a 1) b)))))

(define append
    (lambda (a b)
        (if (and (empty a) (empty b))
            '()
            (if (empty a)
                b
                (if (empty b)
                    a
                    (cons (head a) (append (tail a) b)))))))

(define reverse
    (lambda (l)
        (if (empty l)
            '()
            (append (reverse (tail l)) (cons (head l) '())))))

(define filter
    (lambda (condition l)
        (if (empty l)
            '()
            (if (condition (head l))
                (cons (head l) (filter condition (tail l)))
                (filter condition (tail l))))))

(define map
    (lambda (function l)
        (if (empty l)
            '()
            (cons (function (head l)) (map function (tail l))))))

(define reduce
    (lambda (function initial_value l)
        (if (empty l)
            initial_value
            (reduce function (function (head l) initial_value) (tail l)))))

(define get_smaller_than
    (lambda (a l)
        (if (empty l)
            '()
            (filter (lambda (b) (> a b)) l))))

(define get_bigger_than
    (lambda (a l)
        (if (empty l)
            '()
            (filter (lambda (b) (<= a b)) l))))

(define sort
    (lambda (l)
        (if (empty l)
            '()
             (append (sort (get_smaller_than (head l) (tail l))) (cons (head l) (sort (get_bigger_than (head l) (tail l))))))))

